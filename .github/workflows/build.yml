name: Test Build
on:
  push:
    branches:
      - master
      - next
  pull_request:
    types: [ opened, reopened, synchronize, edited, ready_for_review, review_requested ]
  schedule:
    - cron: '0 0 * * 5' # Every Friday at 00:00
jobs:
  distcheck:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-20.04]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Linux dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update -y
          sudo apt-get install -y protobuf-compiler libprotobuf-dev libprotoc-dev
      - name: Install Mac dependencies
        if: startsWith(matrix.os, 'macos')
        run: brew install protobuf automake libtool
      - name: Run distcheck
        run: |
          ./autogen.sh
          ./configure
          make -j${nproc} distcheck VERBOSE=1

  distcheck-multiarch:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - arch: armv7
          - arch: aarch64
          - arch: s390x
          - arch: ppc64le
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v2
        name: Install dependencies and run distcheck
        id: runcmd
        with:
          arch: ${{ matrix.arch }}
          githubToken: ${{ github.token }}
          distro: ubuntu20.04
          install: |
            apt-get update -q -y
            apt-get install -q -y build-essential autoconf automake libtool pkg-config
            apt-get install -q -y protobuf-compiler libprotobuf-dev libprotoc-dev

          run: |
            ./autogen.sh
            ./configure
            make -j3 distcheck VERBOSE=1

  valgrind:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y protobuf-compiler libprotobuf-dev libprotoc-dev valgrind
      - name: Run distcheck with valgrind
        run: |
          ./autogen.sh
          ./configure --enable-valgrind-tests CFLAGS="-fsanitize=undefined -fno-sanitize-recover=undefined"
          make -j${nproc} distcheck DISTCHECK_CONFIGURE_FLAGS="--enable-valgrind-tests CFLAGS=\"-fsanitize=undefined -fno-sanitize-recover=undefined\"" VERBOSE=1

  coverage:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y protobuf-compiler libprotobuf-dev libprotoc-dev lcov
      - name: Run coverage build
        run: |
          ./autogen.sh
          ./configure --enable-code-coverage
          make -j${nproc}
          mkdir coverage
          lcov --no-external --capture --initial --directory . --output-file ./coverage/lcov.info --include '*protobuf-c.c'
          make check
          lcov --no-external --capture --directory . --output-file ./coverage/lcov.info --include '*protobuf-c.c'
      - uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  cmake:
    strategy:
      matrix:
        build_type: [Debug, Release]
        os: [macos-latest, ubuntu-20.04]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Linux dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update -y
          sudo apt-get install -y protobuf-compiler libprotobuf-dev libprotoc-dev
      - name: Install Mac dependencies
        if: startsWith(matrix.os, 'macos')
        run: brew install protobuf abseil
      - name: Run cmake tests
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=protobuf-c-bin -S "build-cmake" -B "build"
          cmake --build "build" -j3
          cmake --build "build" --target test
          cmake --build "build" --target install

  cmake-msvc:
    strategy:
      matrix:
        build-type: [Debug, Release]
        shared-lib: [ON, OFF]
      fail-fast: false
    name: "MSVC CMake (${{ matrix.build-type }}, DLL: ${{ matrix.shared-lib }})"
    runs-on: windows-latest
    env:
      PROTOBUF_VERSION: "v29.3"
      ABSEIL_VERSION: "20240722.0"
    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1
        with:
            arch: amd64
      - name: Build and install abseil
        run: |
          cd ~
          git clone --depth=1 https://github.com/abseil/abseil-cpp.git -b ${{ env.ABSEIL_VERSION }} abseil
          cd ~/abseil
          cmake -B build -G "NMake Makefiles" `
            -DCMAKE_CXX_STANDARD=17 `
            -DCMAKE_INSTALL_PREFIX=~/abseil-bin `
            -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} `
            -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded${{ matrix.build-type == 'Debug' && 'Debug' || '' }}${{ matrix.shared-lib == 'ON' && 'DLL' || '' }} `
            -DABSL_PROPAGATE_CXX_STD=ON `
            -DBUILD_SHARED_LIBS=${{ matrix.shared-lib }} `
          ;
          cmake --build "build" -j4
          cmake --build "build" --target install
      - name: Build and install protobuf
        run: |
          cd ~
          git clone --depth=1 https://github.com/protocolbuffers/protobuf.git -b ${{ env.PROTOBUF_VERSION }} protobuf
          cd ~/protobuf
          cmake -B build -G "NMake Makefiles" `
            -DCMAKE_CXX_STANDARD=17 `
            -DCMAKE_INSTALL_PREFIX=~/protobuf-bin `
            -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} `
            -DABSL_PROPAGATE_CXX_STD=ON `
            -Dabsl_ROOT=~/abseil-bin `
            -Dprotobuf_ABSL_PROVIDER=package `
            -Dprotobuf_BUILD_EXAMPLES=OFF `
            -Dprotobuf_BUILD_LIBUPB=OFF `
            -Dprotobuf_BUILD_SHARED_LIBS=${{ matrix.shared-lib }} `
            -Dprotobuf_BUILD_TESTS=OFF `
          ;
          cmake --build "build" -j4
          cmake --build "build" --target install
      - name: Run cmake tests
        run: |
          cmake -B build -G "NMake Makefiles" `
            -DCMAKE_INSTALL_PREFIX=~/protobuf-c-bin `
            -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} `
            -DBUILD_TESTS=ON `
            -DBUILD_SHARED_LIBS=${{ matrix.shared-lib }} `
            -DProtobuf_ROOT="~/protobuf-bin" `
            -Dabsl_ROOT="~/abseil-bin" `
          ;
          cmake --build "build" -j3
          cmake --build "build" --target test
          cmake --build "build" --target install
